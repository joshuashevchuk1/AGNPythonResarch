Index: PencilAnalysis.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ================================================================\r\n#\r\n#   each sub directory in the cwd\r\n#   run selected analysis scripts\r\n#   send all data through github\r\n#\r\n# ================================================================\r\n\r\nimport numpy\r\nimport os\r\nimport sys\r\nimport PencilData as PD\r\nfrom mpl_toolkits.mplot3d import Axes3D\r\nimport matplotlib.pyplot as plt\r\nimport traceback\r\nimport logging\r\nimport numpy as np\r\nimport math\r\nimport matplotlib.patches as mpatches\r\nimport scipy.interpolate\r\nimport CheckArrayTest as chk\r\n\r\ndef find_nearest(array,value):\r\n    idx = np.searchsorted(array, value, side=\"left\")\r\n    if idx > 0 and (idx == len(array) or math.fabs(value - array[idx-1]) < math.fabs(value - array[idx])):\r\n        return array[idx-1]\r\n    else:\r\n        return array[idx]\r\n\r\nclass Pencil_Analysis(object):\r\n\r\n    def __init__(self,\r\n                 data_functions,\r\n                 Orbit=None,\r\n                 MaxOrbits=None,\r\n                 Orbit_standard=None,\r\n                 step=None,\r\n                 TempSigma=False,\r\n                 dir_run_list=None,\r\n                 var_dir_list=None,\r\n                 temp_dir_list=None,\r\n                 Calc_DTTm=None,\r\n                 Calc_Temp=False,\r\n                 Calc_Density=False,\r\n                 Calc_Energy=False,\r\n                 Calc_OEnergy=False,\r\n                 Calc_Dynamics=False,\r\n                 Calc_Rates_Energy=False,\r\n                 Calc_ToomreQ=False):\r\n\r\n        self.Orbit = Orbit\r\n        self.Orbit_standard = Orbit_standard\r\n        self.MaxOrbits = MaxOrbits\r\n        self.data_functions = data_functions\r\n        self.dir_run_list = dir_run_list\r\n        self.var_dir_list = var_dir_list\r\n        self.temp_dir_list = temp_dir_list\r\n        self.step = step\r\n        self.TempSigma = TempSigma\r\n        self.Calc_DTTm = Calc_DTTm\r\n        self.Calc_Temp = Calc_Temp\r\n        self.Calc_Density = Calc_Density\r\n        self.Calc_Energy = Calc_Energy\r\n        self.Calc_OEnergy = Calc_OEnergy\r\n        self.Calc_Dynamics = Calc_Dynamics\r\n        self.Calc_Rates_Energy = Calc_Rates_Energy\r\n        self.Calc_ToomreQ = Calc_ToomreQ\r\n\r\n        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n        logging.info('constructor intializied')\r\n\r\n    def Make_Vars(self):\r\n\r\n        print('================')\r\n        print('Making Vars')\r\n        print('================')\r\n\r\n        data_functions = self.data_functions\r\n        dir_run_list = self.dir_run_list\r\n        var_dir_list = self.var_dir_list\r\n        Orbit = self.Orbit\r\n        step = self.step\r\n        temp_dir_list = self.temp_dir_list\r\n        TempSigma = self.TempSigma\r\n        Orbit_standard = self.Orbit_standard\r\n        Calc_Temp = self.Calc_Temp\r\n        Calc_Density = self.Calc_Density\r\n        Calc_Energy = self.Calc_Energy\r\n        Calc_Dynamics = self.Calc_Dynamics\r\n        Calc_Rates_Energy = self.Calc_Rates_Energy\r\n        Calc_ToomreQ = self.Calc_ToomreQ\r\n\r\n        var_dir_list = []\r\n        dir_run_list = next(os.walk('.'))[1]\r\n\r\n        i = 0\r\n        di = 1\r\n\r\n        while i <= len(dir_run_list)-1:\r\n            var_dir_list.append(\r\n                data_functions.grepDATA(\r\n                    dir_run_list[i],\r\n                    Orbit,\r\n                    Calc_Temp=Calc_Temp,\r\n                    Calc_Density=Calc_Density,\r\n                    step=step,\r\n                    Orbit_standard=Orbit_standard,\r\n                    Calc_Energy=Calc_Energy,\r\n                    Calc_Dynamics=Calc_Dynamics,\r\n                    Calc_Rates_Energy=Calc_Rates_Energy,\r\n                    Calc_ToomreQ=Calc_ToomreQ)\r\n            )\r\n            data_functions.pingGit(dir_run_list[i])\r\n            data_functions.pingTemp(dir_run_list[i])\r\n            i = i+di\r\n\r\n        return var_dir_list\r\n\r\n    def pingToomreQ(self, data_frame):\r\n\r\n        Calc_ToomreQ = self.Calc_ToomreQ\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n                    try:\r\n                        print('================')\r\n                        print('Making Toomre plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    Toomre = data_frame[n]['Toomre']\r\n                    x2d = data_frame[n]['x2d']\r\n                    y2d = data_frame[n]['y2d']\r\n                    ncolors = 256\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    PL2 = ax1.contourf(x2d, y2d, Toomre, ncolors)\r\n                    ax1.set_aspect('equal')\r\n                    #plt.contourf(x2d, y2d, Toomre, ncolors)\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                    # cax.set_label('Kelvin')\r\n                    cax.set_aspect(20)\r\n                    cax.set_ylabel('Density in code units', fontsize=10)\r\n\r\n                    plt.colorbar(PL2, cax=cax)\r\n                    plt.ylabel('Q eff')\r\n                    plt.xlabel(r'$\\tau$')\r\n                    plt.title('mean Toomre Q eff per orbit')\r\n                    plt.savefig('Standard_ToomreQ_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n                except:\r\n                    print('================')\r\n                    print('No Toomre Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping ToomreQ Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingEnergy(self, data_frame):\r\n\r\n        Calc_Rates_Energy = self.Calc_Rates_Energy\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n\r\n                    try:\r\n                        print('================')\r\n                        print('Making Energy plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    KE_Sum = data_frame[n]['KE_Sum']\r\n                    UE_Sum = data_frame[n]['UE_Sum']\r\n                    UINT_Sum = data_frame[n]['UINT_Sum']\r\n                    Total = data_frame[n]['Total_Disk_Energy']\r\n                    Total_Avg = data_frame[n]['Total_Disk_Energy_Avg']\r\n                    OE_Sum = data_frame[n]['OE_Sum']\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    OE_Sum_Avg = data_frame[n]['OE_Sum_Avg']\r\n                    KE_Sum_Avg = data_frame[n]['KE_Sum_Avg']\r\n                    UE_Sum_Avg = data_frame[n]['UE_Sum_Avg']\r\n                    UINT_Sum_Avg = data_frame[n]['UINT_Sum_Avg']\r\n\r\n                    KE_rate = data_frame[n]['KE_rate']\r\n                    UE_rate = data_frame[n]['UE_rate']\r\n                    UINT_rate = data_frame[n]['UINT_rate']\r\n                    OE_rate = data_frame[n]['OE_rate']\r\n                    KE_fit = data_frame[n]['KE_fit']\r\n                    UE_fit = data_frame[n]['UE_fit']\r\n                    UINT_fit = data_frame[n]['UINT_fit']\r\n                    OE_fit = data_frame[n]['OE_fit']\r\n                    KE_fit_rate = data_frame[n]['KE_fit_rate']\r\n                    UE_fit_rate = data_frame[n]['UE_fit_rate']\r\n                    UINT_fit_rate = data_frame[n]['UINT_fit_rate']\r\n                    OE_fit_rate = data_frame[n]['OE_fit_rate']\r\n                    KE_error = data_frame[n]['KE_error']\r\n                    UE_error = data_frame[n]['UE_error']\r\n                    UINT_error = data_frame[n]['UINT_error']\r\n                    OE_error = data_frame[n]['OE_error']\r\n\r\n                    print(len(KE_Sum))\r\n                    # print(KE_fit)\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n                    # ping energy has unique handles do not copy for other plots\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  \t\t = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n                    KE_Sum_Label = mpatches.Patch(\r\n                        color='green', label='Kinetic')\r\n                    UE_Sum_Label = mpatches.Patch(\r\n                        color='red', label='Potential')\r\n                    UINT_Sum_Label = mpatches.Patch(\r\n                        color='purple', label='Internal')\r\n                    OE_Sum_Label = mpatches.Patch(\r\n                        color='orange', label='Orbital')\r\n                    Total_Label = mpatches.Patch(color='blue', label='Total')\r\n                    fit_Label = mpatches.Patch(color='black', label='fit')\r\n                    KE_rate_Label = mpatches.Patch(\r\n                        color='white', label='Pencil derivative :'+str(KE_rate))\r\n                    UE_rate_Label = mpatches.Patch(\r\n                        color='white', label='Pencil derivative :'+str(UE_rate))\r\n                    UINT_rate_Label = mpatches.Patch(\r\n                        color='white', label='Pencil derivative :'+str(UINT_rate))\r\n                    OE_rate_Label = mpatches.Patch(\r\n                        color='white', label='Pencil derivative :'+str(OE_rate))\r\n                    KE_fr_Label = mpatches.Patch(\r\n                        color='white', label='fit derivative : '+str(KE_fit_rate))\r\n                    UE_fr_Label = mpatches.Patch(\r\n                        color='white', label='fit derivative : '+str(UE_fit_rate))\r\n                    UINT_fr_Label = mpatches.Patch(\r\n                        color='white', label='fit derivative : '+str(UINT_fit_rate))\r\n                    OE_fr_Label = mpatches.Patch(\r\n                        color='white', label='fit derivative : '+str(OE_fit_rate))\r\n                    KE_error_Label = mpatches.Patch(\r\n                        color='white', label='error :'+str(KE_error))\r\n                    UE_error_Label = mpatches.Patch(\r\n                        color='white', label='error :'+str(UE_error))\r\n                    UINT_error_Label = mpatches.Patch(\r\n                        color='white', label='error :'+str(UINT_error))\r\n                    OE_error_Label = mpatches.Patch(\r\n                        color='white', label='error :'+str(OE_error))\r\n\r\n                    # ---------------------------------------------------------------------\r\n                    # =========================\r\n                    #\r\n                    # plot all relevant energy data\r\n                    # if calc energy is called, plot those as well\r\n                    #\r\n                    # =========================\r\n\r\n                    # =========================\r\n                    # Energy magnitude\r\n                    # =========================\r\n\r\n                    plt.figure(figsize=(10, 10))\r\n                    plt.title('Energy Magnitude Comparison')\r\n                    plt.plot(KE_Sum, color='green', label='Kinetic', ls='--')\r\n                    plt.plot(UE_Sum, color='red', label='Potential')\r\n                    plt.plot(UINT_Sum, color='purple',\r\n                             label='Internal', ls='-.')\r\n                    plt.plot(np.abs(Total[:]), color='blue',\r\n                             label='Total disk energy')\r\n                    plt.plot(\r\n                        np.abs(OE_Sum[:]), color='orange', label='Orbital', ls=':')\r\n                    plt.yscale('log')\r\n                    plt.xlabel('time (Orbits)', fontweight='bold')\r\n                    plt.ylabel('Joule (Code units)', fontweight='bold')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches,\r\n                                        KE_Sum_Label,\r\n                                        UE_Sum_Label,\r\n                                        UINT_Sum_Label,\r\n                                        OE_Sum_Label], loc=2)\r\n                    plt.savefig('Standard_ErgMC_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    plt.close()\r\n\r\n                    # =========================\r\n                    # Total Energy\r\n                    # =========================\r\n\r\n                    plt.figure(figsize=(10, 10))\r\n                    plt.title('Energy Magnitude Comparison')\r\n                    plt.plot(np.abs(Total_Avg[:]), color='blue',\r\n                             label='Total disk energy', ls='--')\r\n                    plt.xlabel('time (Orbits)', fontweight='bold')\r\n                    plt.ylabel('Joule (Code units)', fontweight='bold')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n                    plt.savefig('Standard_ErgTot_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    plt.close()\r\n\r\n                    # =========================\r\n                    # Total Energy with eccentricity\r\n                    # =========================\r\n\r\n                    plt.figure(figsize=(10, 10))\r\n                    plt.title('Energy Magnitude Comparison')\r\n                    plt.plot(eccentricity[:len(Total_Avg[:])], np.abs(\r\n                        Total_Avg[:]), color='blue', label='Total disk energy', ls=':')\r\n                    plt.xlabel('eccentricity', fontweight='bold')\r\n                    plt.ylabel('Joule (Code units)', fontweight='bold')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n                    plt.savefig('Standard_ErgEcc_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    plt.close()\r\n\r\n                    # =========================\r\n                    # Potential Energy of the disk\r\n                    # ========================\r\n\r\n                    plt.figure(figsize=(10, 10))\r\n                    plt.title('Disk Potential Energy')\r\n                    plt.plot(UE_Sum, color='red',\r\n                             label='Disk Potential Energy', ls='--')\r\n                    if Calc_Rates_Energy == True:\r\n                        # plot rates and check error\r\n                        plt.plot(UE_fit, color='black', label='UE fit', ls=':')\r\n                    plt.xlabel('time (Orbits)', fontweight='bold')\r\n                    plt.ylabel('Joule (Code units)', fontweight='bold')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches,\r\n                                        UE_Sum_Label,\r\n                                        fit_Label,\r\n                                        UE_rate_Label,\r\n                                        UE_fr_Label,\r\n                                        UE_error_Label], loc=2)\r\n                    plt.savefig('Standard_ErgUE_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    plt.close()\r\n\r\n                    # ========================\r\n                    # Kinetic Energy of the disk\r\n                    # ========================\r\n\r\n                    plt.figure(figsize=(10, 10))\r\n                    plt.title('Disk Kinetic Energy')\r\n                    plt.plot(KE_Sum, color='green',\r\n                             label='Disk Kinetic Energy', ls='--')\r\n                    if Calc_Rates_Energy == True:\r\n                        # plot rates and check error\r\n                        plt.plot(KE_fit, color='black', label='KE fit', ls=':')\r\n                    plt.xlabel('time (Orbits)', fontweight='bold')\r\n                    plt.ylabel('Joule (Code units)', fontweight='bold')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches,\r\n                                        KE_Sum_Label,\r\n                                        fit_Label,\r\n                                        KE_rate_Label,\r\n                                        KE_fr_Label,\r\n                                        KE_error_Label], loc=2)\r\n                    plt.savefig('Standard_ErgKE_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    plt.close()\r\n\r\n                    # ========================\r\n                    # Internal Energy of the disk\r\n                    # ========================\r\n\r\n                    plt.figure(figsize=(10, 10))\r\n                    plt.title('Disk Internal Energy')\r\n                    plt.plot(UINT_Sum, color='purple',\r\n                             label='Disk Internal Energy', ls='--')\r\n                    if Calc_Rates_Energy == True:\r\n                        # plot rates and check error\r\n                        plt.plot(UINT_fit, color='black',\r\n                                 label='UINT fit', ls=':')\r\n                    plt.xlabel('time (Orbits)', fontweight='bold')\r\n                    plt.ylabel('Joule (Code units)', fontweight='bold')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches,\r\n                                        UINT_Sum_Label,\r\n                                        fit_Label,\r\n                                        UINT_rate_Label,\r\n                                        UINT_fr_Label,\r\n                                        UINT_error_Label], loc=2)\r\n                    plt.savefig('Standard_ErgUINT_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    plt.close()\r\n\r\n                    # ========================\r\n                    # Planet Orbital Energy\r\n                    # ========================\r\n\r\n                    plt.figure(figsize=(10, 10))\r\n                    plt.title('Orbital Energy')\r\n                    plt.plot(OE_Sum, color='orange',\r\n                             label='Orbital Energy', ls='--')\r\n                    if Calc_Rates_Energy == True:\r\n                        # plot rates and check error\r\n                        plt.plot(OE_fit, color='black', label='OE fit', ls=':')\r\n                    plt.xlabel('time (Orbits)', fontweight='bold')\r\n                    plt.ylabel('Joule (Code units)', fontweight='bold')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches,\r\n                                        OE_Sum_Label,\r\n                                        fit_Label,\r\n                                        OE_rate_Label,\r\n                                        OE_fr_Label,\r\n                                        OE_error_Label], loc=2)\r\n                    plt.savefig('Standard_ErgOE_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    plt.close()\r\n\r\n                    # =========================\r\n                    # ---------------------------------------------------------------------\r\n\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n                except:\r\n                    print('================')\r\n                    print('No Energy Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Energy Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def Make_TempVars(self, data_frame):\r\n\r\n        Calc_Temp = self.Calc_Temp\r\n\r\n        TempSigma = self.TempSigma\r\n        temp_dir_list = self.temp_dir_list\r\n\r\n        if TempSigma == False:\r\n            temp_dir_list = None\r\n        else:\r\n            temp_dir_list = []\r\n            ecc_dir_list = []\r\n            name_dir_list = []\r\n\r\n            i = 0\r\n            di = 1\r\n            while i <= len(data_frame)-1:\r\n                try:\r\n                    if data_frame[i]['tempdata'] == None:\r\n                        i = i+di\r\n                    else:\r\n                        temp_dir_list.append(data_frame[i]['tempdata'])\r\n                        try:\r\n                            eccentricity = data_frame[i]['eccentricity']\r\n                            ecc_dir_list.append(round(eccentricity[0], 3))\r\n                            name_dir_list.append(data_frame[i]['DirName'])\r\n                        except:\r\n                            print('================')\r\n                            traceback.print_exc()\r\n                            print('================')\r\n\r\n                        print('================')\r\n                        print('Adding Temp Data')\r\n                        print('================')\r\n                        i = i+di\r\n                except:\r\n                    traceback.print_exc()\r\n                    print('================')\r\n                    print('No Temp Data found to plot')\r\n                    print('================')\r\n                i = i+di\r\n\r\n        return temp_dir_list, ecc_dir_list, name_dir_list\r\n\r\n    def Get_TempDistribution(self,\r\n                             temp_frame,\r\n                             ecc_frame=None,\r\n                             name_frame=None):\r\n        try:\r\n            print('================')\r\n            print('getting temp distribution')\r\n            print('================')\r\n\r\n            # attempt to get temp distribution\r\n            i = 0\r\n            di = 1\r\n\r\n            f = 0\r\n            df = 1\r\n\r\n            n = 0\r\n            dn = 1\r\n\r\n            temp_distribution = []\r\n            temp_ecc = []\r\n            temp_name = []\r\n\r\n            while f <= len(temp_frame)-1:\r\n                try:\r\n                    if math.isnan(np.std(temp_frame[f][:])) == False:\r\n                        temp_distribution.append(np.std(temp_frame[f][:]))\r\n                        if ecc_frame == None or name_frame == None:\r\n                            f = f+df\r\n                        else:\r\n                            temp_ecc.append(ecc_frame[f])\r\n                            temp_name.append(name_frame[f])\r\n                            f = f+df\r\n                    else:\r\n                        f = f+df\r\n                except:\r\n                    print('f failed at ' + str(f))\r\n                    f = f+df\r\n        except:\r\n            print('================')\r\n            print('================')\r\n            print('Temp_distribution error')\r\n            print('================')\r\n            print('================')\r\n            traceback.print_exc()\r\n            print('================')\r\n            print('================')\r\n\r\n        return temp_distribution, temp_ecc, temp_name\r\n\r\n    def pingGTM_Sigma(self, data_frame):\r\n\r\n        GTM_Sigma_AllOrbits = []\r\n        DirMass_GTM = []\r\n        DirEcc_GTM = []\r\n\r\n        i = 0\r\n        di = 1\r\n\r\n        while i <= len(data_frame)-1:\r\n            try:\r\n                try:\r\n                    GTM_Sigma_AllOrbits.append(data_frame[i]['GTM_Sigma'])\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                except:\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                    print('================')\r\n                    print('no Data for GTM_Sigma ')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n            except:\r\n                print('================')\r\n                print('error in dir' + str(i))\r\n                print('================')\r\n                traceback.print_exc()\r\n            i = i+di\r\n\r\n        try:\r\n            try:\r\n                os.system('mkdir Pencil_Analysis')\r\n                os.chdir('Pencil_Analysis')\r\n            except:\r\n                print('================')\r\n                print('directory already found')\r\n                print('================')\r\n                os.chdir('Pencil_Analysis')\r\n\r\n            fig = plt.figure(figsize=(10, 10))\r\n            #ax = fig.add_subplot(111, projection='3d')\r\n            ax = fig.add_subplot(111)\r\n\r\n            DirEcc_GTM = np.ravel(DirEcc_GTM)\r\n            DirMass_GTM = np.ravel(DirMass_GTM)\r\n            GTM_Sigma_AllOrbits = np.ravel(GTM_Sigma_AllOrbits)\r\n\r\n            ax.scatter(DirEcc_GTM, DirMass_GTM,\r\n                       c=GTM_Sigma_AllOrbits, marker='o')\r\n\r\n            ax.ticklabel_format(style='sci', axis='x', scilimits=(0, 0))\r\n            ax.ticklabel_format(style='sci', axis='y', scilimits=(0, 0))\r\n            #ax.ticklabel_format(style='sci', axis='z', scilimits=(0,0))\r\n            ax.set_ylim(0, 1e-4)\r\n\r\n            plt.title(\r\n                r'global $\\sigma_{T}$ as a function of mass ratio and eccentricity')\r\n            ax.set_ylabel('q', fontsize=14)\r\n            ax.set_xlabel(r'$\\varepsilon$', fontsize=14)\r\n            #ax.set_zlabel(r'global $\\sigma_{T}$',fontsize=14)\r\n            # plt.show()\r\n\r\n            plt.savefig('Global_SigmaTemp(e,q)_Parameter_Space.png')\r\n            # too many figs may be open.\r\n            # close plots once done\r\n            plt.close(fig)\r\n            os.system('git add *.png')\r\n            os.chdir('..')\r\n\r\n        except:\r\n            print('================')\r\n            print('No Temp Sigma found to plot')\r\n            print('================')\r\n            os.chdir('..')\r\n\r\n        # =========================\r\n        #\r\n        #   get information for slices of contour plots.\r\n        #   we want a accurate represenation of global slices\r\n        #\r\n        # =========================\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(DirEcc_GTM)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n                    try:\r\n                        print('================')\r\n                        print('Making Sigma Temp Slices plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    # =========================\r\n                    #\r\n                    # 3D plot slices\r\n                    #\r\n                    # =========================\r\n                    #\r\n                    # array needs to be related to DirEcc_GTM\r\n                    #\r\n                    # for a fixed ecc (0.1 could be the first)\r\n                    # get all data_frame[n] compenents that have this fixed ecc\r\n                    # get there respective q (mass ratio), and GTMSigma_Temp(standard deviation of mean disk temperature)\r\n                    # make new arrays containing q, and sigma T for the constant ecc.\r\n                    # iterate until the maximum eccentricity for the 3D plot has been reached\r\n                    #\r\n                    # =========================\r\n\r\n                    Mass_Slice = []\r\n                    GTM_Sigma_Slice = []\r\n\r\n                    i = 0\r\n                    di = 1\r\n\r\n                    while i <= len(DirEcc_GTM)-1:\r\n                        if DirEcc_GTM[i] == DirEcc_GTM[n]:\r\n                            Mass_Slice.append(DirMass_GTM[i])\r\n                            GTM_Sigma_Slice.append(GTM_Sigma_AllOrbits[i])\r\n                            i = i+di\r\n                        else:\r\n                            i = i+di\r\n\r\n                    plt.scatter(Mass_Slice, GTM_Sigma_Slice, color='purple')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.xlabel('q')\r\n                    plt.ylabel(r'global $\\sigma_{T}$')\r\n                    plt.ticklabel_format(\r\n                        style='sci', axis='x', scilimits=(0, 0))\r\n                    plt.ticklabel_format(\r\n                        style='sci', axis='y', scilimits=(0, 0))\r\n                    plt.xlim(0, max(Mass_Slice))\r\n                    plt.ylim(0, max(GTM_Sigma_Slice))\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.savefig('Global_SigmaT_Slices_' +\r\n                                str(DirEcc_GTM[n])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n\r\n                except:\r\n                    print('================')\r\n                    print('No Sigma Temp Slices found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Sigma Temp slices Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingGTM_Sigma_O(self, data_frame):\r\n\r\n        GTM_Sigma_AllOrbits = []\r\n        DirMass_GTM = []\r\n        DirEcc_GTM = []\r\n\r\n        i = 0\r\n        di = 1\r\n\r\n        while i <= len(data_frame)-1:\r\n            try:\r\n                try:\r\n                    GTM_Sigma_AllOrbits.append(data_frame[i]['GTM_Sigma_O'])\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                except:\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                    print('================')\r\n                    print('no Data for GTM_Sigma in')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n            except:\r\n                print('================')\r\n                print('error in dir' + str(i))\r\n                print('================')\r\n                traceback.print_exc()\r\n\r\n            i = i+di\r\n\r\n        try:\r\n            try:\r\n                os.system('mkdir Pencil_Analysis')\r\n                os.chdir('Pencil_Analysis')\r\n            except:\r\n                print('================')\r\n                print('directory already found')\r\n                print('================')\r\n                os.chdir('Pencil_Analysis')\r\n\r\n            fig = plt.figure(figsize=(10, 10))\r\n            #ax = fig.add_subplot(111, projection='3d')\r\n            ax = fig.add_subplot(111)\r\n\r\n            # =========================\r\n            # parameters for contourplot\r\n            # =========================\r\n\r\n            DirEcc_GTMi = np.linspace(min(DirEcc_GTM), max(DirEcc_GTM), 500)\r\n            DirMass_GTMi = np.linspace(min(DirMass_GTM), max(DirMass_GTM), 500)\r\n            DirEcc_GTMi, DirMass_GTMi = np.meshgrid(DirEcc_GTMi, DirMass_GTMi)\r\n            GTM_Sigma_AllOrbitsi = scipy.interpolate.griddata(\r\n                (DirEcc_GTM, DirMass_GTM),\r\n                GTM_Sigma_AllOrbits,\r\n                (DirEcc_GTMi,\r\n                 DirMass_GTMi),\r\n                method='linear')\r\n\r\n            im = ax.contourf(DirEcc_GTMi, DirMass_GTMi, GTM_Sigma_AllOrbitsi)\r\n\r\n            cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n            cax.set_aspect(20)\r\n            fig.colorbar(im, cax=cax)\r\n\r\n            # =========================\r\n\r\n            ax.ticklabel_format(style='sci', axis='x', scilimits=(0, 0))\r\n            ax.ticklabel_format(style='sci', axis='y', scilimits=(0, 0))\r\n            #ax.ticklabel_format(style='sci', axis='z', scilimits=(0,0))\r\n            ax.set_ylim(0, 1e-4)\r\n\r\n            plt.suptitle(\r\n                r'global $\\sigma_{T}$ as a function of mass ratio and eccentricity')\r\n            ax.set_ylabel('q', fontsize=14)\r\n            ax.set_xlabel(r'$\\varepsilon$', fontsize=14)\r\n            #ax.set_zlabel(r'global $\\sigma_{T}$',fontsize=14)\r\n            # plt.show()\r\n\r\n            plt.savefig('Global_SigmaTemp_O_(e,q)_Parameter_Space.png')\r\n            # too many figs may be open.\r\n            # close plots once done\r\n            plt.close(fig)\r\n            os.system('git add *.png')\r\n            os.chdir('..')\r\n\r\n        except:\r\n            print('================')\r\n            print('No Temp Sigma found to plot')\r\n            print('================')\r\n            os.chdir('..')\r\n\r\n        # =========================\r\n        #\r\n        #   get information for slices of contour plots.\r\n        #   we want a accurate represenation of global slices\r\n        #\r\n        # =========================\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(DirEcc_GTM)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n                    try:\r\n                        print('================')\r\n                        print('Making Sigma Temp Slices plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    # =========================\r\n                    #\r\n                    # 3D plot slices\r\n                    #\r\n                    # =========================\r\n                    #\r\n                    # array needs to be related to DirEcc_GTM\r\n                    #\r\n                    # for a fixed ecc (0.1 could be the first)\r\n                    # get all data_frame[n] compenents that have this fixed ecc\r\n                    # get there respective q (mass ratio), and GTMSigma_Temp(standard deviation of mean disk temperature)\r\n                    # make new arrays containing q, and sigma T for the constant ecc.\r\n                    # iterate until the maximum eccentricity for the 3D plot has been reached\r\n                    #\r\n                    # =========================\r\n\r\n                    Mass_Slice = []\r\n                    GTM_Sigma_Slice = []\r\n\r\n                    i = 0\r\n                    di = 1\r\n\r\n                    while i <= len(DirEcc_GTM)-1:\r\n                        if DirEcc_GTM[i] == DirEcc_GTM[n]:\r\n                            Mass_Slice.append(DirMass_GTM[i])\r\n                            GTM_Sigma_Slice.append(GTM_Sigma_AllOrbits[i])\r\n                            i = i+di\r\n                        else:\r\n                            i = i+di\r\n\r\n                    plt.scatter(Mass_Slice, GTM_Sigma_Slice, color='purple')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.xlabel('q')\r\n                    plt.ylabel(r'global $\\sigma_{T}$')\r\n                    plt.ticklabel_format(\r\n                        style='sci', axis='x', scilimits=(0, 0))\r\n                    plt.ticklabel_format(\r\n                        style='sci', axis='y', scilimits=(0, 0))\r\n                    plt.xlim(0, max(Mass_Slice))\r\n                    plt.ylim(0, max(GTM_Sigma_Slice))\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.savefig('Global_SigmaTi_O_Slices_' +\r\n                                str(DirEcc_GTM[n])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n\r\n                except:\r\n                    print('================')\r\n                    print('No Sigma Temp Slices found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Sigma Temp slices Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingGTM_O_DT(self, data_frame):\r\n\r\n        GTM_Sigma_AllOrbits = []\r\n        DirMass_GTM = []\r\n        DirEcc_GTM = []\r\n\r\n        i = 0\r\n        di = 1\r\n\r\n        while i <= len(data_frame)-1:\r\n            try:\r\n                try:\r\n                    GTM_Sigma_AllOrbits.append(data_frame[i]['DGTemp_Mean'])\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                except:\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                    print('================')\r\n                    print('no Data for GTM_Sigma ')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n            except:\r\n                print('================')\r\n                print('error in dir' + str(i))\r\n                print('================')\r\n                traceback.print_exc()\r\n\r\n            i = i+di\r\n\r\n        try:\r\n            try:\r\n                os.system('mkdir Pencil_Analysis')\r\n                os.chdir('Pencil_Analysis')\r\n            except:\r\n                print('================')\r\n                print('directory already found')\r\n                print('================')\r\n                os.chdir('Pencil_Analysis')\r\n\r\n            fig = plt.figure(figsize=(10, 10))\r\n            #ax = fig.add_subplot(111, projection='3d')\r\n            ax = fig.add_subplot(111)\r\n\r\n            # =========================\r\n            # parameters for contourplot\r\n            # =========================\r\n\r\n            DirEcc_GTMi = np.linspace(min(DirEcc_GTM), max(DirEcc_GTM), 500)\r\n            DirMass_GTMi = np.linspace(min(DirMass_GTM), max(DirMass_GTM), 500)\r\n            DirEcc_GTMi, DirMass_GTMi = np.meshgrid(DirEcc_GTMi, DirMass_GTMi)\r\n            GTM_Sigma_AllOrbitsi = scipy.interpolate.griddata(\r\n                (DirEcc_GTM, DirMass_GTM),\r\n                GTM_Sigma_AllOrbits,\r\n                (DirEcc_GTMi,\r\n                 DirMass_GTMi),\r\n                method='linear')\r\n\r\n            im = ax.contourf(DirEcc_GTMi, DirMass_GTMi, GTM_Sigma_AllOrbitsi)\r\n\r\n            cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n            cax.set_aspect(20)\r\n            fig.colorbar(im, cax=cax)\r\n\r\n            # =========================\r\n\r\n            ax.ticklabel_format(style='sci', axis='x', scilimits=(0, 0))\r\n            ax.ticklabel_format(style='sci', axis='y', scilimits=(0, 0))\r\n            #ax.ticklabel_format(style='sci', axis='z', scilimits=(0,0))\r\n            ax.set_ylim(0, 1e-4)\r\n\r\n            plt.suptitle(\r\n                r'$\\frac{\\partial T}{\\partial t}$ as a function of mass ratio and eccentricity')\r\n            ax.set_ylabel('q', fontsize=14)\r\n            ax.set_xlabel(r'$\\varepsilon$', fontsize=14)\r\n            #ax.set_zlabel(r'global $\\sigma_{T}$',fontsize=14)\r\n            # plt.show()\r\n\r\n            plt.savefig('Global_dT_O_(e,q)_Parameter_Space.png')\r\n            # too many figs may be open.\r\n            # close plots once done\r\n            plt.close(fig)\r\n            os.system('git add *.png')\r\n            os.chdir('..')\r\n\r\n        except:\r\n            print('================')\r\n            print('No DTemp found to plot')\r\n            print('================')\r\n            os.chdir('..')\r\n\r\n        # =========================\r\n        #\r\n        #   get information for slices of contour plots.\r\n        #   we want a accurate represenation of global slices\r\n        #\r\n        # =========================\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(DirEcc_GTM)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n                    try:\r\n                        print('================')\r\n                        print('Making DTemp Slices plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    # =========================\r\n                    #\r\n                    # 3D plot slices\r\n                    #\r\n                    # =========================\r\n                    #\r\n                    # array needs to be related to DirEcc_GTM\r\n                    #\r\n                    # for a fixed ecc (0.1 could be the first)\r\n                    # get all data_frame[n] compenents that have this fixed ecc\r\n                    # get there respective q (mass ratio), and GTMSigma_Temp(standard deviation of mean disk temperature)\r\n                    # make new arrays containing q, and sigma T for the constant ecc.\r\n                    # iterate until the maximum eccentricity for the 3D plot has been reached\r\n                    #\r\n                    # =========================\r\n\r\n                    Mass_Slice = []\r\n                    GTM_Sigma_Slice = []\r\n\r\n                    i = 0\r\n                    di = 1\r\n\r\n                    while i <= len(DirEcc_GTM)-1:\r\n                        if DirEcc_GTM[i] == DirEcc_GTM[n]:\r\n                            Mass_Slice.append(DirMass_GTM[i])\r\n                            GTM_Sigma_Slice.append(GTM_Sigma_AllOrbits[i])\r\n                            i = i+di\r\n                        else:\r\n                            i = i+di\r\n\r\n                    plt.scatter(Mass_Slice, GTM_Sigma_Slice, color='purple')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.xlabel('q')\r\n                    plt.ylabel(r'dT$')\r\n                    plt.ticklabel_format(\r\n                        style='sci', axis='x', scilimits=(0, 0))\r\n                    plt.ticklabel_format(\r\n                        style='sci', axis='y', scilimits=(0, 0))\r\n                    plt.xlim(0, max(Mass_Slice))\r\n                    plt.ylim(0, max(GTM_Sigma_Slice))\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.savefig('Global_dT_O_Slices_' +\r\n                                str(DirEcc_GTM[n])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n\r\n                except:\r\n                    print('================')\r\n                    print('No d Temp Slices found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping d Temp slices Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingGTM_Sigma_3D(self, data_frame):\r\n\r\n        GTM_Sigma_AllOrbits = []\r\n        DirMass_GTM = []\r\n        DirEcc_GTM = []\r\n\r\n        i = 0\r\n        di = 1\r\n\r\n        while i <= len(data_frame)-1:\r\n            try:\r\n                try:\r\n                    GTM_Sigma_AllOrbits.append(data_frame[i]['GTM_Sigma'])\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                except:\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                    print('================')\r\n                    print('no Data for GTM_Sigma in')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n            except:\r\n                print('================')\r\n                print('error in dir' + str(i))\r\n                print('================')\r\n                traceback.print_exc()\r\n            i = i+di\r\n\r\n        try:\r\n            try:\r\n                os.system('mkdir Pencil_Analysis')\r\n                os.chdir('Pencil_Analysis')\r\n            except:\r\n                print('================')\r\n                print('directory already found')\r\n                print('================')\r\n                os.chdir('Pencil_Analysis')\r\n\r\n            fig = plt.figure(figsize=(10, 10))\r\n            ax = fig.add_subplot(111, projection='3d')\r\n            #ax  = fig.add_subplot(111)\r\n            ax.scatter(DirEcc_GTM, DirMass_GTM,\r\n                       GTM_Sigma_AllOrbits, marker='o')\r\n\r\n            ax.ticklabel_format(style='sci', axis='x', scilimits=(0, 0))\r\n            ax.ticklabel_format(style='sci', axis='y', scilimits=(0, 0))\r\n            ax.ticklabel_format(style='sci', axis='z', scilimits=(0, 0))\r\n            ax.set_ylim(0, 1e-4)\r\n\r\n            plt.title(\r\n                r'global $\\sigma_{T}$ as a function of mass ratio and eccentricity')\r\n            ax.set_ylabel('q', fontsize=14)\r\n            ax.set_xlabel(r'$\\varepsilon$', fontsize=14)\r\n            ax.set_zlabel(r'global $\\sigma_{T}$', fontsize=14)\r\n            # plt.show()\r\n\r\n            plt.savefig('Global_SigmaTemp(e,q)_Parameter_Space_3D.png')\r\n            # too many figs may be open.\r\n            # close plots once done\r\n            plt.close(fig)\r\n            os.system('git add *.png')\r\n            os.chdir('..')\r\n\r\n        except:\r\n            print('================')\r\n            print('No Temp Sigma found to plot')\r\n            print('================')\r\n            os.chdir('..')\r\n\r\n    def pingGTM_Sigma_3D_O(self, data_frame):\r\n\r\n        GTM_Sigma_AllOrbits = []\r\n        DirMass_GTM = []\r\n        DirEcc_GTM = []\r\n\r\n        i = 0\r\n        di = 1\r\n\r\n        while i <= len(data_frame)-1:\r\n            try:\r\n                try:\r\n                    GTM_Sigma_AllOrbits.append(data_frame[i]['GTM_Sigma_O'])\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                except:\r\n                    DirMass_GTM.append(data_frame[i]['par1'])\r\n                    eccentricity = data_frame[i]['eccentricity']\r\n                    DirEcc_GTM.append(round(eccentricity[0], 1))\r\n                    print('================')\r\n                    print('no Data for GTM_Sigma in' )\r\n                    print('================')\r\n                    traceback.print_exc()\r\n            except:\r\n                print('================')\r\n                print('error in dir' + str(i))\r\n                print('================')\r\n                traceback.print_exc()\r\n            i = i+di\r\n\r\n        try:\r\n            try:\r\n                os.system('mkdir Pencil_Analysis')\r\n                os.chdir('Pencil_Analysis')\r\n            except:\r\n                print('================')\r\n                print('directory already found')\r\n                print('================')\r\n                os.chdir('Pencil_Analysis')\r\n\r\n            fig = plt.figure(figsize=(10, 10))\r\n            ax = fig.add_subplot(111, projection='3d')\r\n            #ax  = fig.add_subplot(111)\r\n            ax.scatter(DirEcc_GTM, DirMass_GTM,\r\n                       GTM_Sigma_AllOrbits, marker='o')\r\n\r\n            ax.ticklabel_format(style='sci', axis='x', scilimits=(0, 0))\r\n            ax.ticklabel_format(style='sci', axis='y', scilimits=(0, 0))\r\n            ax.ticklabel_format(style='sci', axis='z', scilimits=(0, 0))\r\n            ax.set_ylim(0, 1e-4)\r\n\r\n            plt.title(\r\n                r'global $\\sigma_{T}$ as a function of mass ratio and eccentricity')\r\n            ax.set_ylabel('q', fontsize=14)\r\n            ax.set_xlabel(r'$\\varepsilon$', fontsize=14)\r\n            ax.set_zlabel(r'global $\\sigma_{T}$', fontsize=14)\r\n            # plt.show()\r\n\r\n            plt.savefig('Global_SigmaTemp_O_(e,q)_Parameter_Space_3D.png')\r\n            # too many figs may be open.\r\n            # close plots once done\r\n            plt.close(fig)\r\n            os.system('git add *.png')\r\n            os.chdir('..')\r\n\r\n        except:\r\n            print('================')\r\n            print('No Temp Sigma found to plot')\r\n            print('================')\r\n            os.chdir('..')\r\n\r\n    def pingTempDplot(self,\r\n                      dist,\r\n                      ecc,\r\n                      name):\r\n        try:\r\n            try:\r\n                os.system('mkdir Pencil_Analysis')\r\n                os.chdir('Pencil_Analysis')\r\n            except:\r\n                print('================')\r\n                print('directory already found')\r\n                print('================')\r\n                os.chdir('Pencil_Analysis')\r\n\r\n            fig, (ax1) = plt.subplots(1, 1, figsize=(20, 10))\r\n            fig.subplots_adjust(bottom=0.07, top=0.95, left=0.07)\r\n            ax1.scatter(name, dist, color='blue')\r\n            ax1.plot(name, dist, ls='--', color='orange', alpha=0.3)\r\n            ax1.set_aspect('auto')\r\n            plt.tight_layout()\r\n            plt.grid(True)\r\n            plt.xlabel('Data Directory')\r\n            plt.ylabel(r'$\\sigma$ (global)')\r\n            plt.title('Global Temp '+r'$\\sigma$')\r\n            plt.subplots_adjust(bottom=0.05, top=0.95, left=0.10)\r\n            plt.savefig('Global_Temp_Distribution.png')\r\n            # too many figs may be open.\r\n            # close plots once done\r\n            plt.close(fig)\r\n            os.system('git add *.png')\r\n            os.chdir('..')\r\n\r\n        except:\r\n            print('================')\r\n            print('No Temp Distribution found to plot')\r\n            print('================')\r\n            os.chdir('..')\r\n\r\n    def pingTTm(self, data_frame):\r\n\r\n        Calc_Temp = self.Calc_Temp\r\n\r\n        # =========================\r\n        #\r\n        # Get the longitude of Perihelion to check the precession of the orbiter\r\n        # should only be included for global disk runs or anything that may cause point masses to precess\r\n        #\r\n        # =========================\r\n\r\n        if self.Calc_Temp == True:\r\n            #\r\n            #\r\n            #\r\n            try:\r\n                n = 0\r\n                dn = 1\r\n                while n <= len(data_frame)-1:\r\n                    try:\r\n                        try:\r\n                            os.system('mkdir Pencil_Analysis')\r\n                            os.chdir('Pencil_Analysis')\r\n                        except:\r\n                            print('================')\r\n                            print('directory already found')\r\n                            print('================')\r\n                            os.chdir('Pencil_Analysis')\r\n                        try:\r\n                            print('================')\r\n                            print('Making TTm vs time plot for ' +\r\n                                  str(data_frame[n]['DirName']))\r\n                            print('================')\r\n                        except:\r\n                            print('================')\r\n                            print('Dir error')\r\n                            print('================')\r\n                            print(n)\r\n                            print('================')\r\n                            logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                                level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                                datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                            logging.info('========================')\r\n                            logging.info(n)\r\n                            logging.info('========================')\r\n\r\n                        time = data_frame[n]['t']\r\n                        GlobalTemp_Mean = data_frame[n]['GlobalTemp_Mean']\r\n                        TTm = data_frame[n]['TTm']\r\n                        TTm_rate = data_frame[n]['TTm_rate']\r\n\r\n\r\n                        # =========================\r\n                        # legend handles\r\n                        # =========================\r\n\r\n                        # use this information when adding important parameters to the run\r\n\r\n                        eccentricity = data_frame[n]['eccentricity']\r\n                        sound_speed = data_frame[n]['cs']\r\n                        aspect_ratio = data_frame[n]['aspect_ratio']\r\n                        initial_pressure = data_frame[n]['initial_pressure']\r\n                        Sigma = data_frame[n]['Sigma']\r\n                        EntropyIndex = data_frame[n]['EntropyIndex']\r\n                        SpecificHeat = data_frame[n]['SpecificHeat']\r\n                        rsmooth = data_frame[n]['rsmooth']\r\n                        gamma = data_frame[n]['gamma']\r\n                        Gamma0 = data_frame[n]['Gamma0']\r\n                        alpha = data_frame[n]['alpha']\r\n                        beta = data_frame[n]['beta']\r\n\r\n                        # DEBUG\r\n                        print(GlobalTemp_Mean)\r\n                        print(TTm)\r\n\r\n                        plt.plot(\r\n                            time, (GlobalTemp_Mean[:]-GlobalTemp_Mean[0]), color='purple', ls=':')\r\n                        plt.title('Mean disk temperature vs time')\r\n                        plt.xlabel(r'$t/T_0$')\r\n                        plt.ylabel('Temperature')\r\n                        plt.tight_layout()\r\n                        plt.grid(True)\r\n\r\n                        DirEcc = (round(eccentricity[0], 1))\r\n                        if DirEcc == 0.1:\r\n                            nearest = find_nearest(time,350)\r\n                            plt.xlim([0, time[:nearest-1]])\r\n                        elif DirEcc == 0.3:\r\n                            nearest = find_nearest(time, 350)\r\n                            plt.xlim([0, time[:nearest-1]])\r\n                        elif DirEcc == 0.5:\r\n                            nearest = find_nearest(time, 2000)\r\n                            plt.xlim([0, time[:nearest-1]])\r\n                        elif DirEcc == 0.7:\r\n                            nearest = find_nearest(time, 3000)\r\n                            plt.xlim([0, time[:nearest-1]])\r\n\r\n                        DirMass = data_frame[n]['par1']\r\n\r\n                        DirMass_patches = mpatches.Patch(\r\n                            color='white', label='q :'+str(DirMass))\r\n                        DirEcc_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                        Dirsound_speed_patches = mpatches.Patch(\r\n                            color='white', label='sound speed :'+str(sound_speed))\r\n                        Diraspect_ratio_patches = mpatches.Patch(\r\n                            color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                        Dirinitial_pressure_patches = mpatches.Patch(\r\n                            color='white', label='inital pressure :'+str(initial_pressure))\r\n                        DirSigma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                        #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                        Dir_rsmooth_patches = mpatches.Patch(\r\n                            color='white', label='potential smoothing :'+str(rsmooth))\r\n                        Dir_gamma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                        Dir_alpha_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                        Dir_beta_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\beta$ :'+str(beta))\r\n                        Dir_TTm_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\beta$ :'+str(TTm_rate))\r\n\r\n                        plt.legend(handles=[DirMass_patches,\r\n                                            DirEcc_patches,\r\n                                            Dirsound_speed_patches,\r\n                                            Dirinitial_pressure_patches,\r\n                                            DirSigma_patches,\r\n                                            Dir_rsmooth_patches,\r\n                                            Dir_gamma_patches,\r\n                                            Dir_alpha_patches,\r\n                                            Dir_beta_patches,\r\n                                            Dir_TTm_patches], loc=2)\r\n\r\n                        # =========================\r\n\r\n                        plt.savefig('Standard_TTm_' +\r\n                                    str(data_frame[n]['DirName'])+'.png')\r\n                        # too many figs may be open.\r\n                        # close plots once done\r\n                        plt.close()\r\n                        os.system('git add *.png')\r\n                        os.chdir('..')\r\n                    except:\r\n                        print('================')\r\n                        print('No TTm  found to plot')\r\n                        print('================')\r\n                        traceback.print_exc()\r\n                        os.chdir('..')\r\n                    n = n+dn\r\n            except:\r\n                print('================')\r\n                print('ping TTm Loop error')\r\n                print('================')\r\n                traceback.print_exc()\r\n                os.chdir('..')\r\n                return False\r\n        else:\r\n            print('================')\r\n            print('No Temperature to plot moving on (TTm)')\r\n            print('================')\r\n\r\n    def ping_LongPerihelion(self, data_frame):\r\n\r\n        # =========================\r\n        #\r\n        # Get the longitude of Perihelion to check the precession of the orbiter\r\n        # should only be included for global disk runs or anything that may cause point masses to precess\r\n        #\r\n        # =========================\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n                    try:\r\n                        print('================')\r\n                        print('Making Perihelion plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    plt.plot(data_frame[n]['t'], data_frame[n]\r\n                             ['long_perihelion'], color='red')\r\n                    plt.title('Longitude of perihelion vs time')\r\n                    plt.xlabel(r'$t/T_0$')\r\n                    plt.ylabel(r'$\\omega(rad)$')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.xlim([0, data_frame[n]['tmax']])\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.savefig('Standard_Precession_Check_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close()\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n                except:\r\n                    print('================')\r\n                    print('No Perhilion Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Torque Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def ping_LongPerihelion_10_Orbits(self, data_frame):\r\n\r\n        # =========================\r\n        #\r\n        # Get the longitude of Perihelion to check the precession of the orbiter\r\n        # should only be included for global disk runs or anything that may cause point masses to precess\r\n        #\r\n        # =========================\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n                    try:\r\n                        print('================')\r\n                        print('Making Perihelion plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    plt.plot(data_frame[n]['t'], data_frame[n]\r\n                             ['long_perihelion'], color='red')\r\n                    plt.title('Longitude of perihelion vs time')\r\n                    plt.xlabel(r'$t/T_0$')\r\n                    plt.ylabel(r'$\\omega(rad)$')\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n                    plt.xlim([0, 10])\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.savefig('Standard_Precession_Check_10_Orbits' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close()\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n                except:\r\n                    print('================')\r\n                    print('No Perhilion Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Torque Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingTorque(self, data_frame):\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n\r\n                    try:\r\n                        print('================')\r\n                        print('Making Torque plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    ax1.plot(data_frame[n]['time'], data_frame[n]\r\n                             ['torqint'], '--', label='Inner')\r\n                    ax1.plot(data_frame[n]['time'], data_frame[n]\r\n                             ['torqext'], '--', label='Outer')\r\n                    ax1.plot(data_frame[n]['time'], data_frame[n]\r\n                             ['torqtotal'], label='Total')\r\n                    # ax1.plot(data_frame[n]['time'], data_frame[n]['tanaka'],\r\n                    #         linestyle=':', label='Tanaka et  al. 2002')\r\n                    ax1.set_aspect('auto')\r\n                    plt.xlim([0, data_frame[n]['tmax']])\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.title(r'Torques')\r\n                    plt.xlabel(r'$t/T_0$')\r\n                    plt.ylabel(r'$\\Gamma$')\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Standard_Torque_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n                except:\r\n                    print('================')\r\n                    print('No Torque Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Torque Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingContour_Dynamic(self, data_frame):\r\n\r\n        # get contour plots in slices of orbits\r\n\r\n        Calc_Temp = self.Calc_Temp\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n\r\n                    try:\r\n                        print('================')\r\n                        print('Making Dynamic Contour plots for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    x2d = data_frame[n]['x2d']\r\n                    y2d = data_frame[n]['y2d']\r\n                    xrq2 = data_frame[n]['xrq2']\r\n                    yrq2 = data_frame[n]['yrq2']\r\n                    Dynamic_Density = data_frame[n]['Dynamic_Density']\r\n                    Dynamic_Temperature = data_frame[n]['Dynamic_Temperature']\r\n                    Dynamic_Shock = data_frame[n]['Dynamic_Shock']\r\n                    Standard_Orbit = data_frame[n]['Standard_Orbit']\r\n                    Init_Temp = data_frame[n]['Init_Temp']\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    Dynamic_Loop = 0\r\n                    dLoop = 1\r\n                    ncolors = 256\r\n\r\n                    print('================')\r\n                    print('Making Dynamic_Density')\r\n                    print('================')\r\n\r\n                    while Dynamic_Loop <= len(Dynamic_Density)-1:\r\n                        # =========================\r\n                        # =========================\r\n                        # Density Contour\r\n                        # =========================\r\n                        # =========================\r\n\r\n                        fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                        fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                        PL2 = ax1.contourf(\r\n                            x2d, y2d, Dynamic_Density[Dynamic_Loop][:], ncolors)\r\n                        ax1.set_aspect('equal')\r\n\r\n                        DirMass_patches = mpatches.Patch(\r\n                            color='white', label='q :'+str(DirMass))\r\n                        DirEcc_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                        Dirsound_speed_patches = mpatches.Patch(\r\n                            color='white', label='sound speed :'+str(sound_speed))\r\n                        Diraspect_ratio_patches = mpatches.Patch(\r\n                            color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                        Dirinitial_pressure_patches = mpatches.Patch(\r\n                            color='white', label='inital pressure :'+str(initial_pressure))\r\n                        DirSigma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                        #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                        Dir_rsmooth_patches = mpatches.Patch(\r\n                            color='white', label='potential smoothing :'+str(rsmooth))\r\n                        Dir_gamma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                        Dir_alpha_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                        Dir_beta_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                        plt.legend(handles=[DirMass_patches,\r\n                                            DirEcc_patches,\r\n                                            Dirsound_speed_patches,\r\n                                            Dirinitial_pressure_patches,\r\n                                            DirSigma_patches,\r\n                                            Dir_rsmooth_patches,\r\n                                            Dir_gamma_patches,\r\n                                            Dir_alpha_patches,\r\n                                            Dir_beta_patches], loc=2)\r\n\r\n                        # =========================\r\n\r\n                        cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                        # cax.set_label('Kelvin')\r\n                        cax.set_aspect(20)\r\n                        cax.set_ylabel('Density in code units', fontsize=10)\r\n                        plt.colorbar(PL2, cax=cax)\r\n                        plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                        plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                        plt.savefig('Dynamic_Density_'\r\n                                    + str(data_frame[n]['DirName'])+'_'\r\n                                    + str(Dynamic_Loop*Standard_Orbit)\r\n                                    + '.png')\r\n                        # too many figs may be open.\r\n                        # close plots once done\r\n                        plt.close(fig)\r\n                        Dynamic_Loop = Dynamic_Loop + dLoop\r\n\r\n                    Dynamic_Loop = 0\r\n                    dLoop = 1\r\n\r\n                    print('================')\r\n                    print('Making Dynamic_Temperature')\r\n                    print('================')\r\n\r\n                    if Calc_Temp == True:\r\n\r\n                        while Dynamic_Loop <= len(Dynamic_Temperature)-1:\r\n\r\n                            # =========================\r\n                            # =========================\r\n                            # Temp Contour\r\n                            # =========================\r\n                            # =========================\r\n\r\n                            Normalized_Temp = (\r\n                                Dynamic_Temperature[Dynamic_Loop][:]-Init_Temp[:])/Init_Temp[:]\r\n\r\n                            fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                            fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                            ax1.contourf(\r\n                                x2d, y2d, Dynamic_Temperature[Dynamic_Loop][:]/Init_Temp[:], ncolors)\r\n                            ax1.set_aspect('equal')\r\n\r\n                            DirMass_patches = mpatches.Patch(\r\n                                color='white', label='q :'+str(DirMass))\r\n                            DirEcc_patches = mpatches.Patch(\r\n                                color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                            Dirsound_speed_patches = mpatches.Patch(\r\n                                color='white', label='sound speed :'+str(sound_speed))\r\n                            Diraspect_ratio_patches = mpatches.Patch(\r\n                                color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                            Dirinitial_pressure_patches = mpatches.Patch(\r\n                                color='white', label='inital pressure :'+str(initial_pressure))\r\n                            DirSigma_patches = mpatches.Patch(\r\n                                color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                            #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                            Dir_rsmooth_patches = mpatches.Patch(\r\n                                color='white', label='potential smoothing :'+str(rsmooth))\r\n                            Dir_gamma_patches = mpatches.Patch(\r\n                                color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                            Dir_alpha_patches = mpatches.Patch(\r\n                                color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                            Dir_beta_patches = mpatches.Patch(\r\n                                color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                            plt.legend(handles=[DirMass_patches,\r\n                                                DirEcc_patches,\r\n                                                Dirsound_speed_patches,\r\n                                                Dirinitial_pressure_patches,\r\n                                                DirSigma_patches,\r\n                                                Dir_rsmooth_patches,\r\n                                                Dir_gamma_patches,\r\n                                                Dir_alpha_patches,\r\n                                                Dir_beta_patches], loc=2)\r\n\r\n                            # =========================\r\n\r\n                            # cax=plt.axes([0.85,0.1,0.075,0.8])\r\n                            # cax.set_label('Kelvin')\r\n                            # cax.set_aspect(20)\r\n                            #cax.set_ylabel('Temp in code units',fontsize=10)\r\n                            plt.colorbar(PL2, ax=ax1)\r\n                            plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                            plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                            plt.savefig('Dynamic_Temperature_'\r\n                                        + str(data_frame[n]['DirName'])+'_'\r\n                                        + str(Dynamic_Loop*Standard_Orbit)\r\n                                        + '.png')\r\n                            # too many figs may be open.\r\n                            # close plots once done\r\n                            plt.close(fig)\r\n\r\n                            Dynamic_Loop = Dynamic_Loop + dLoop\r\n\r\n                        Dynamic_Loop = 0\r\n                        dLoop = 1\r\n                    else:\r\n                        print('================')\r\n                        print('No Temperature to plot moving on (Dynamic)')\r\n                        print('================')\r\n\r\n                    print('================')\r\n                    print('Making Dynamic_Shock')\r\n                    print('================')\r\n\r\n                    while Dynamic_Loop <= len(Dynamic_Shock)-1:\r\n                        # =========================\r\n                        # =========================\r\n                        # Shock Contour\r\n                        # =========================\r\n                        # =========================\r\n\r\n                        fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                        fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                        ax1.contourf(\r\n                            x2d, y2d, Dynamic_Shock[Dynamic_Loop][:], ncolors)\r\n                        ax1.set_aspect('equal')\r\n\r\n                        DirMass_patches = mpatches.Patch(\r\n                            color='white', label='q :'+str(DirMass))\r\n                        DirEcc_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                        Dirsound_speed_patches = mpatches.Patch(\r\n                            color='white', label='sound speed :'+str(sound_speed))\r\n                        Diraspect_ratio_patches = mpatches.Patch(\r\n                            color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                        Dirinitial_pressure_patches = mpatches.Patch(\r\n                            color='white', label='inital pressure :'+str(initial_pressure))\r\n                        DirSigma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                        #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                        Dir_rsmooth_patches = mpatches.Patch(\r\n                            color='white', label='potential smoothing :'+str(rsmooth))\r\n                        Dir_gamma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                        Dir_alpha_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                        Dir_beta_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                        plt.legend(handles=[DirMass_patches,\r\n                                            DirEcc_patches,\r\n                                            Dirsound_speed_patches,\r\n                                            Dirinitial_pressure_patches,\r\n                                            DirSigma_patches,\r\n                                            Dir_rsmooth_patches,\r\n                                            Dir_gamma_patches,\r\n                                            Dir_alpha_patches,\r\n                                            Dir_beta_patches], loc=2)\r\n\r\n                        cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                        # cax.set_label('Kelvin')\r\n                        cax.set_aspect(20)\r\n                        cax.set_ylabel('shock in code units', fontsize=10)\r\n                        plt.colorbar(PL2, cax=cax)\r\n                        plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                        plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                        plt.savefig('Dynamic_Shock_'\r\n                                    + str(data_frame[n]['DirName'])+'_'\r\n                                    + str(Dynamic_Loop*Standard_Orbit)\r\n                                    + '.png')\r\n                        plt.close(fig)\r\n                        Dynamic_Loop = Dynamic_Loop + dLoop\r\n\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n                except:\r\n                    print('================')\r\n                    print('No Dynamic Contour Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Dynamic Contour Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingContour_Midplane(self, data_frame):\r\n\r\n        Calc_Temp = self.Calc_Temp\r\n\r\n        # =========================\r\n        #\r\n        #   Handle all plots relevant to contour plots\r\n        #   ( top down disk, midplane , slice, etc)\r\n        #   as well as physical profiles for said contour plot\r\n        #\r\n        # =========================\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n\r\n                    try:\r\n                        print('================')\r\n                        print('Making Contour plots for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    rad_grid = data_frame[n]['rad_grid']\r\n\r\n                    x2d = data_frame[n]['x2d']\r\n                    y2d = data_frame[n]['y2d']\r\n                    xrq2 = data_frame[n]['xrq2']\r\n                    yrq2 = data_frame[n]['yrq2']\r\n\r\n                    rho_fv = data_frame[n]['rho_fv']\r\n                    shock_fv = data_frame[n]['shock_fv']\r\n                    x_grid = data_frame[n]['x_grid']\r\n                    y_grid = data_frame[n]['y_grid']\r\n\r\n                    if Calc_Temp == True:\r\n                        temp_fv = data_frame[n]['temp_fv']\r\n                        Init_Temp = data_frame[n]['Init_Temp']\r\n                        Normalized_Temp = (\r\n                            temp_fv[:]-Init_Temp[:])/Init_Temp[:]\r\n                    else:\r\n                        temp_fv = []\r\n                        Init_Temp = []\r\n                        Normalized_Temp = []\r\n                    ncolors = 256\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    # =========================\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Density Midplane Contour\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(20, 20))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    PL2 = ax1.contourf(x_grid, y_grid, rho_fv, ncolors)\r\n                    # ax1.set_aspect('equal')\r\n                    ax1.set_aspect(1/ax1.get_data_ratio())\r\n                    cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                    # cax.set_label('Kelvin')\r\n                    cax.set_aspect(20)\r\n                    cax.set_ylabel('Density in code units', fontsize=10)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n                    plt.colorbar(PL2, cax=cax)\r\n                    plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Midplane_Contour_Density_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Temp Contour\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    if Calc_Temp == True:\r\n                        #\r\n                        #\r\n                        #\r\n\r\n                        Normalized_Temp = (\r\n                            temp_fv[:]-Init_Temp[:])/Init_Temp[:]\r\n\r\n                        fig, (ax1) = plt.subplots(1, 1, figsize=(20, 20))\r\n                        fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                        ax1.contourf(x_grid, y_grid, Normalized_Temp, ncolors)\r\n                        # ax1.set_aspect('equal')\r\n                        ax1.set_aspect(1/ax1.get_data_ratio())\r\n                        # cax=plt.axes([0.85,0.1,0.075,0.8])\r\n                        # cax.set_label('Kelvin')\r\n                        # cax.set_aspect(20)\r\n                        #cax.set_ylabel('Temp in code units',fontsize=10)\r\n                        plt.legend(handles=[DirMass_patches,\r\n                                            DirEcc_patches,\r\n                                            Dirsound_speed_patches,\r\n                                            Dirinitial_pressure_patches,\r\n                                            DirSigma_patches,\r\n                                            Dir_rsmooth_patches,\r\n                                            Dir_gamma_patches,\r\n                                            Dir_alpha_patches,\r\n                                            Dir_beta_patches], loc=2)\r\n                        plt.colorbar(PL2, ax=ax1)\r\n                        plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                        plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                        plt.savefig('Midplane_Contour_Temp_' +\r\n                                    str(data_frame[n]['DirName'])+'.png')\r\n                        # too many figs may be open.\r\n                        # close plots once done\r\n                        plt.close(fig)\r\n                    #\r\n                    #\r\n                    #\r\n                    else:\r\n                        print('================')\r\n                        print('Not plotting temperture for midplane contour plots')\r\n                        print('================')\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Shock Contour\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(20, 20))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    ax1.contourf(x_grid, y_grid, shock_fv, ncolors)\r\n                    # ax1.set_aspect('equal')\r\n                    ax1.set_aspect(1/ax1.get_data_ratio())\r\n                    cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                    # cax.set_label('Kelvin')\r\n                    cax.set_aspect(20)\r\n                    cax.set_ylabel('shock in code units', fontsize=10)\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n                    plt.colorbar(PL2, cax=cax)\r\n                    plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Midplane_Contour_Shock_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n                except:\r\n                    print('================')\r\n                    print('No Contour Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Contour Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingContour(self, data_frame):\r\n\r\n        Calc_Temp = self.Calc_Temp\r\n\r\n        # =========================\r\n        #\r\n        #   Handle all plots relevant to contour plots\r\n        #   ( top down disk, midplane , slice, etc)\r\n        #   as well as physical profiles for said contour plot\r\n        #\r\n        # =========================\r\n\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n\r\n                    try:\r\n                        print('================')\r\n                        print('Making Contour plots for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    rad_grid = data_frame[n]['rad_grid']\r\n\r\n                    x2d = data_frame[n]['x2d']\r\n                    y2d = data_frame[n]['y2d']\r\n                    xrq2 = data_frame[n]['xrq2']\r\n                    yrq2 = data_frame[n]['yrq2']\r\n\r\n                    rho_fv = data_frame[n]['rho_fv']\r\n                    temp_fv = data_frame[n]['temp_fv']\r\n                    shock_fv = data_frame[n]['shock_fv']\r\n                    Init_Temp = data_frame[n]['Init_Temp']\r\n\r\n                    avgrho_fv = data_frame[n]['avgrho_fv']\r\n                    avgtemp_fv = data_frame[n]['avgtemp_fv']\r\n                    avgshock_fv = data_frame[n]['avgshock_fv']\r\n\r\n                    ncolors = 256\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Density Contour\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    PL2 = ax1.contourf(x2d, y2d, rho_fv, ncolors)\r\n                    ax1.set_aspect('equal')\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                    # cax.set_label('Kelvin')\r\n                    cax.set_aspect(20)\r\n                    cax.set_ylabel('Density in code units', fontsize=10)\r\n                    plt.colorbar(PL2, cax=cax)\r\n                    plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Standard_Contour_Density_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Temp Contour\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    if Calc_Temp == True:\r\n                        #\r\n                        #\r\n                        #\r\n\r\n                        Normalized_Temp = (\r\n                            temp_fv[:]-Init_Temp[:])/Init_Temp[:]\r\n\r\n                        fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                        fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                        ax1.contourf(x2d, y2d, Normalized_Temp, ncolors)\r\n                        ax1.set_aspect('equal')\r\n\r\n                        # =========================\r\n                        # legend handles\r\n                        # =========================\r\n\r\n                        # use this information when adding important parameters to the run\r\n\r\n                        eccentricity = data_frame[n]['eccentricity']\r\n                        sound_speed = data_frame[n]['cs']\r\n                        aspect_ratio = data_frame[n]['aspect_ratio']\r\n                        initial_pressure = data_frame[n]['initial_pressure']\r\n                        Sigma = data_frame[n]['Sigma']\r\n                        EntropyIndex = data_frame[n]['EntropyIndex']\r\n                        SpecificHeat = data_frame[n]['SpecificHeat']\r\n                        rsmooth = data_frame[n]['rsmooth']\r\n                        gamma = data_frame[n]['gamma']\r\n                        Gamma0 = data_frame[n]['Gamma0']\r\n                        alpha = data_frame[n]['alpha']\r\n                        beta = data_frame[n]['beta']\r\n\r\n                        DirMass = data_frame[n]['par1']\r\n                        DirEcc = (round(eccentricity[0], 1))\r\n\r\n                        DirMass_patches = mpatches.Patch(\r\n                            color='white', label='q :'+str(DirMass))\r\n                        DirEcc_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                        Dirsound_speed_patches = mpatches.Patch(\r\n                            color='white', label='sound speed :'+str(sound_speed))\r\n                        Diraspect_ratio_patches = mpatches.Patch(\r\n                            color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                        Dirinitial_pressure_patches = mpatches.Patch(\r\n                            color='white', label='inital pressure :'+str(initial_pressure))\r\n                        DirSigma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                        #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                        Dir_rsmooth_patches = mpatches.Patch(\r\n                            color='white', label='potential smoothing :'+str(rsmooth))\r\n                        Dir_gamma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                        Dir_alpha_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                        Dir_beta_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                        plt.legend(handles=[DirMass_patches,\r\n                                            DirEcc_patches,\r\n                                            Dirsound_speed_patches,\r\n                                            Dirinitial_pressure_patches,\r\n                                            DirSigma_patches,\r\n                                            Dir_rsmooth_patches,\r\n                                            Dir_gamma_patches,\r\n                                            Dir_alpha_patches,\r\n                                            Dir_beta_patches], loc=2)\r\n\r\n                        # =========================\r\n\r\n                        # cax=plt.axes([0.85,0.1,0.075,0.8])\r\n                        # cax.set_label('Kelvin')\r\n                        # cax.set_aspect(20)\r\n                        #cax.set_ylabel('Temp in code units',fontsize=10)\r\n                        plt.colorbar(PL2, ax=ax1)\r\n                        plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                        plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                        plt.savefig('Standard_Contour_Temp_' +\r\n                                    str(data_frame[n]['DirName'])+'.png')\r\n                        # too many figs may be open.\r\n                        # close plots once done\r\n                        plt.close(fig)\r\n                    #\r\n                    #\r\n                    #\r\n                    else:\r\n                        print('================')\r\n                        print('Not plotting temperture for Standard contour plots')\r\n                        print('================')\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Shock Contour\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    ax1.contourf(x2d, y2d, shock_fv, ncolors)\r\n                    ax1.set_aspect('equal')\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                    # cax.set_label('Kelvin')\r\n                    cax.set_aspect(20)\r\n                    cax.set_ylabel('shock in code units', fontsize=10)\r\n                    plt.colorbar(PL2, cax=cax)\r\n                    plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Standard_Contour_Shock_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    # -----------------------------------------------------------------------------------\r\n                    # =========================\r\n                    # Handle Contour Traces\r\n                    # =========================\r\n                    # -----------------------------------------------------------------------------------\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Density Contour\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    PL2 = ax1.contourf(x2d, y2d, rho_fv, ncolors)\r\n                    ax1.plot(xrq2, yrq2, color='orange')\r\n                    ax1.set_aspect('equal')\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                    # cax.set_label('Kelvin')\r\n                    cax.set_aspect(20)\r\n                    cax.set_ylabel('Density in code units', fontsize=10)\r\n                    plt.colorbar(PL2, cax=cax)\r\n                    plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Standard_Contour_Trace_Density_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    if Calc_Temp == True:\r\n                        #\r\n                        #\r\n                        #\r\n\r\n                        # =========================\r\n                        # =========================\r\n                        # Temp Contour\r\n                        # =========================\r\n                        # =========================\r\n\r\n                        Normalized_Temp = (\r\n                            temp_fv[:]-Init_Temp[:])/Init_Temp[:]\r\n\r\n                        fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                        fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                        ax1.contourf(x2d, y2d, Normalized_Temp, ncolors)\r\n                        ax1.plot(xrq2, yrq2, color='orange')\r\n                        ax1.set_aspect('equal')\r\n\r\n                        # =========================\r\n                        # legend handles\r\n                        # =========================\r\n\r\n                        # use this information when adding important parameters to the run\r\n\r\n                        eccentricity = data_frame[n]['eccentricity']\r\n                        sound_speed = data_frame[n]['cs']\r\n                        aspect_ratio = data_frame[n]['aspect_ratio']\r\n                        initial_pressure = data_frame[n]['initial_pressure']\r\n                        Sigma = data_frame[n]['Sigma']\r\n                        EntropyIndex = data_frame[n]['EntropyIndex']\r\n                        SpecificHeat = data_frame[n]['SpecificHeat']\r\n                        rsmooth = data_frame[n]['rsmooth']\r\n                        gamma = data_frame[n]['gamma']\r\n                        Gamma0 = data_frame[n]['Gamma0']\r\n                        alpha = data_frame[n]['alpha']\r\n                        beta = data_frame[n]['beta']\r\n\r\n                        DirMass = data_frame[n]['par1']\r\n                        DirEcc = (round(eccentricity[0], 1))\r\n\r\n                        DirMass_patches = mpatches.Patch(\r\n                            color='white', label='q :'+str(DirMass))\r\n                        DirEcc_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                        Dirsound_speed_patches = mpatches.Patch(\r\n                            color='white', label='sound speed :'+str(sound_speed))\r\n                        Diraspect_ratio_patches = mpatches.Patch(\r\n                            color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                        Dirinitial_pressure_patches = mpatches.Patch(\r\n                            color='white', label='inital pressure :'+str(initial_pressure))\r\n                        DirSigma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                        #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                        Dir_rsmooth_patches = mpatches.Patch(\r\n                            color='white', label='potential smoothing :'+str(rsmooth))\r\n                        Dir_gamma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                        Dir_alpha_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                        Dir_beta_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                        plt.legend(handles=[DirMass_patches,\r\n                                            DirEcc_patches,\r\n                                            Dirsound_speed_patches,\r\n                                            Dirinitial_pressure_patches,\r\n                                            DirSigma_patches,\r\n                                            Dir_rsmooth_patches,\r\n                                            Dir_gamma_patches,\r\n                                            Dir_alpha_patches,\r\n                                            Dir_beta_patches], loc=2)\r\n\r\n                        # =========================\r\n\r\n                        # cax=plt.axes([0.85,0.1,0.075,0.8])\r\n                        # cax.set_label('Kelvin')\r\n                        # cax.set_aspect(20)\r\n                        #cax.set_ylabel('Temp in code units',fontsize=10)\r\n                        plt.colorbar(PL2, ax=ax1)\r\n                        plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                        plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                        plt.savefig('Standard_Contour_Trace_Temp_' +\r\n                                    str(data_frame[n]['DirName'])+'.png')\r\n                        # too many figs may be open.\r\n                        # close plots once done\r\n                        plt.close(fig)\r\n                    #\r\n                    #\r\n                    #\r\n                    else:\r\n                        print('================')\r\n                        print(\r\n                            'Not plotting temperture for Standard contour plot Traces')\r\n                        print('================')\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Shock Contour\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    ax1.contourf(x2d, y2d, shock_fv, ncolors)\r\n                    ax1.plot(xrq2, yrq2, color='orange')\r\n                    ax1.set_aspect('equal')\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    cax = plt.axes([0.85, 0.1, 0.075, 0.8])\r\n                    # cax.set_label('Kelvin')\r\n                    cax.set_aspect(20)\r\n                    cax.set_ylabel('shock in code units', fontsize=10)\r\n                    plt.colorbar(PL2, cax=cax)\r\n                    plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Standard_Contour_Trace_Shock_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    # =========================\r\n\r\n                    # -----------------------------------------------------------------------------------\r\n                    # =========================\r\n                    # Handle radial profiles\r\n                    # =========================\r\n                    # -----------------------------------------------------------------------------------\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Density Profile\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    ax1.plot(rad_grid, avgrho_fv)\r\n                    ax1.set_xlabel('radius')\r\n                    ax1.set_ylabel('average density')\r\n                    ax1.set_aspect('auto')\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Standard_Profile_Density_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Temp Profile\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    if Calc_Temp == True:\r\n                        #\r\n                        #\r\n                        #\r\n\r\n                        fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                        fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                        ax1.plot(rad_grid, avgtemp_fv)\r\n                        ax1.set_xlabel('radius')\r\n                        ax1.set_ylabel('average temperature')\r\n                        ax1.set_aspect('auto')\r\n\r\n                        # =========================\r\n                        # legend handles\r\n                        # =========================\r\n\r\n                        # use this information when adding important parameters to the run\r\n\r\n                        eccentricity = data_frame[n]['eccentricity']\r\n                        sound_speed = data_frame[n]['cs']\r\n                        aspect_ratio = data_frame[n]['aspect_ratio']\r\n                        initial_pressure = data_frame[n]['initial_pressure']\r\n                        Sigma = data_frame[n]['Sigma']\r\n                        EntropyIndex = data_frame[n]['EntropyIndex']\r\n                        SpecificHeat = data_frame[n]['SpecificHeat']\r\n                        rsmooth = data_frame[n]['rsmooth']\r\n                        gamma = data_frame[n]['gamma']\r\n                        Gamma0 = data_frame[n]['Gamma0']\r\n                        alpha = data_frame[n]['alpha']\r\n                        beta = data_frame[n]['beta']\r\n\r\n                        DirMass = data_frame[n]['par1']\r\n                        DirEcc = (round(eccentricity[0], 1))\r\n\r\n                        DirMass_patches = mpatches.Patch(\r\n                            color='white', label='q :'+str(DirMass))\r\n                        DirEcc_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                        Dirsound_speed_patches = mpatches.Patch(\r\n                            color='white', label='sound speed :'+str(sound_speed))\r\n                        Diraspect_ratio_patches = mpatches.Patch(\r\n                            color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                        Dirinitial_pressure_patches = mpatches.Patch(\r\n                            color='white', label='inital pressure :'+str(initial_pressure))\r\n                        DirSigma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                        #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                        Dir_rsmooth_patches = mpatches.Patch(\r\n                            color='white', label='potential smoothing :'+str(rsmooth))\r\n                        Dir_gamma_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                        Dir_alpha_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                        Dir_beta_patches = mpatches.Patch(\r\n                            color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                        plt.legend(handles=[DirMass_patches,\r\n                                            DirEcc_patches,\r\n                                            Dirsound_speed_patches,\r\n                                            Dirinitial_pressure_patches,\r\n                                            DirSigma_patches,\r\n                                            Dir_rsmooth_patches,\r\n                                            Dir_gamma_patches,\r\n                                            Dir_alpha_patches,\r\n                                            Dir_beta_patches], loc=2)\r\n\r\n                        # =========================\r\n\r\n                        plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                        plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                        plt.savefig('Standard_Profile_Temperature_' +\r\n                                    str(data_frame[n]['DirName'])+'.png')\r\n                        # too many figs may be open.\r\n                        # close plots once done\r\n                        plt.close(fig)\r\n                    #\r\n                    #\r\n                    #\r\n                    else:\r\n                        print('================')\r\n                        print(\r\n                            'Not plotting temperture for Standard contour plot radial Profile')\r\n                        print('================')\r\n\r\n                    # =========================\r\n                    # =========================\r\n                    # Shock Profile\r\n                    # =========================\r\n                    # =========================\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    fig.subplots_adjust(bottom=0.07, top=0.95)\r\n                    ax1.plot(rad_grid, avgshock_fv)\r\n                    ax1.set_xlabel('radius')\r\n                    ax1.set_ylabel('average shock')\r\n                    ax1.set_aspect('auto')\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex             = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.suptitle('t='+str(data_frame[n]['ivar']))\r\n                    plt.subplots_adjust(bottom=0.05, top=0.95)\r\n                    plt.savefig('Standard_Profile_Shock_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n                except:\r\n                    print('================')\r\n                    print('No Contour Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Contour Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingEcc(self, data_frame):\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n\r\n                    try:\r\n                        print('================')\r\n                        print('Making Ecc plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    time = data_frame[n]['time']\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    CN_line = data_frame[n]['CN_line']\r\n\r\n                    fig, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n\r\n                    ax1.plot(time, eccentricity[:len(\r\n                        time)], label='Pencil-code')\r\n                    ax1.plot(time, CN_line[:len(time)],\r\n                             label='CN2008', linestyle=':')\r\n                    plt.title(r'$\\varepsilon$ Decay')\r\n                    plt.xlabel(r'$t/T_0$')\r\n                    plt.ylabel(r'$\\varepsilon$')\r\n                    # plt.yscale('log')\r\n                    plt.xlim([0, data_frame[n]['tmax']])\r\n                    plt.tight_layout()\r\n                    plt.grid(True)\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.savefig('Standard_Ecc_Decay_' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n\r\n                except:\r\n                    print('================')\r\n                    print('No Ecc Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Ecc Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingOrbital(self, data_frame):\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n\r\n                    try:\r\n                        print('================')\r\n                        print('Making Orbital plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    time = data_frame[n]['time']\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    semi_major = data_frame[n]['semi_major']\r\n                    xrq2 = data_frame[n]['xrq2']\r\n                    yrq2 = data_frame[n]['yrq2']\r\n\r\n                    fig, ((ax2, ax3, ax4)) = plt.subplots(\r\n                        1, 3, figsize=(30, 5))\r\n                    fig.tight_layout()\r\n\r\n                    plt.title('Orbit in Cylin Coords')\r\n                    ax2.set_aspect('equal')\r\n                    ax3.set_aspect('auto')\r\n                    ax4.set_aspect('auto')\r\n\r\n                    ax2.set_title('x vs y')\r\n                    ax3.set_title('a vs t')\r\n                    ax4.set_title('e vs t')\r\n\r\n                    ax2.plot(xrq2, yrq2)\r\n                    ax2.set_xlabel('xrq2')\r\n                    ax2.set_ylabel('yrq2')\r\n                    ax3.plot(time, semi_major[:len(time)], color='orange')\r\n                    ax3.set_xlabel('t')\r\n                    ax3.set_ylabel('a')\r\n                    ax4.plot(time, eccentricity[:len(time)], color='orange')\r\n                    ax4.set_xlabel('t')\r\n                    ax4.set_ylabel('e')\r\n\r\n                    ax2.grid(True)\r\n                    ax3.grid(True)\r\n                    ax4.grid(True)\r\n\r\n                    plt.subplots_adjust(wspace=0.18, bottom=0.12)\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.savefig('Standard_Orbit_Info' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig)\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n\r\n                except:\r\n                    print('================')\r\n                    print('No Orbital Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Orbital Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            os.chdir('..')\r\n            return False\r\n\r\n    def pingTempBoxPlot(self, data_frame):\r\n        try:\r\n            n = 0\r\n            dn = 1\r\n            while n <= len(data_frame)-1:\r\n                try:\r\n                    try:\r\n                        os.system('mkdir Pencil_Analysis')\r\n                        os.chdir('Pencil_Analysis')\r\n                    except:\r\n                        print('================')\r\n                        print('directory already found')\r\n                        print('================')\r\n                        os.chdir('Pencil_Analysis')\r\n\r\n                    try:\r\n                        print('================')\r\n                        print('Making Temp Box plot for ' +\r\n                              str(data_frame[n]['DirName']))\r\n                        print('================')\r\n                    except:\r\n                        print('================')\r\n                        print('Dir error')\r\n                        print('================')\r\n                        print(n)\r\n                        print('================')\r\n                        logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                            level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                            datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                        logging.info('========================')\r\n                        logging.info(n)\r\n                        logging.info('========================')\r\n\r\n                    tempdata = data_frame[n]['tempdata']\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n\r\n                    fig1, (ax1) = plt.subplots(1, 1, figsize=(10, 10))\r\n                    plt.title('Temperature boxplots')\r\n                    ax1.set_title(r'$\\epsilon$=' +\r\n                                  str(round(eccentricity[0], 1)))\r\n                    ax1.boxplot(tempdata)\r\n                    ax1.set_ylabel('Temperature')\r\n                    ax1.set_xlabel(r'$\\tau$*'+str(self.step))\r\n                    plt.xscale('linear')\r\n                    plt.grid(True)\r\n\r\n                    # =========================\r\n                    # legend handles\r\n                    # =========================\r\n\r\n                    # use this information when adding important parameters to the run\r\n\r\n                    eccentricity = data_frame[n]['eccentricity']\r\n                    sound_speed = data_frame[n]['cs']\r\n                    aspect_ratio = data_frame[n]['aspect_ratio']\r\n                    initial_pressure = data_frame[n]['initial_pressure']\r\n                    Sigma = data_frame[n]['Sigma']\r\n                    EntropyIndex = data_frame[n]['EntropyIndex']\r\n                    SpecificHeat = data_frame[n]['SpecificHeat']\r\n                    rsmooth = data_frame[n]['rsmooth']\r\n                    gamma = data_frame[n]['gamma']\r\n                    Gamma0 = data_frame[n]['Gamma0']\r\n                    alpha = data_frame[n]['alpha']\r\n                    beta = data_frame[n]['beta']\r\n\r\n                    DirMass = data_frame[n]['par1']\r\n                    DirEcc = (round(eccentricity[0], 1))\r\n\r\n                    DirMass_patches = mpatches.Patch(\r\n                        color='white', label='q :'+str(DirMass))\r\n                    DirEcc_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\varepsilon$ :'+str(DirEcc))\r\n                    Dirsound_speed_patches = mpatches.Patch(\r\n                        color='white', label='sound speed :'+str(sound_speed))\r\n                    Diraspect_ratio_patches = mpatches.Patch(\r\n                        color='white', label='aspect_ratio :'+str(aspect_ratio))\r\n                    Dirinitial_pressure_patches = mpatches.Patch(\r\n                        color='white', label='inital pressure :'+str(initial_pressure))\r\n                    DirSigma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\Sigma$ :'+str(Sigma))\r\n                    #DirEntropyIndex  = mpatches.Patch(color='white',label='Entropy Index :'+str(EntropyIndex))\r\n                    Dir_rsmooth_patches = mpatches.Patch(\r\n                        color='white', label='potential smoothing :'+str(rsmooth))\r\n                    Dir_gamma_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\gamma$ :'+str(gamma))\r\n                    Dir_alpha_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\alpha$ :'+str(alpha))\r\n                    Dir_beta_patches = mpatches.Patch(\r\n                        color='white', label=r'$\\beta$ :'+str(beta))\r\n\r\n                    plt.legend(handles=[DirMass_patches,\r\n                                        DirEcc_patches,\r\n                                        Dirsound_speed_patches,\r\n                                        Dirinitial_pressure_patches,\r\n                                        DirSigma_patches,\r\n                                        Dir_rsmooth_patches,\r\n                                        Dir_gamma_patches,\r\n                                        Dir_alpha_patches,\r\n                                        Dir_beta_patches], loc=2)\r\n\r\n                    # =========================\r\n\r\n                    plt.savefig('Standard_Temp_Box' +\r\n                                str(data_frame[n]['DirName'])+'.png')\r\n                    # too many figs may be open.\r\n                    # close plots once done\r\n                    plt.close(fig1)\r\n                    os.system('git add *.png')\r\n                    os.chdir('..')\r\n\r\n                except:\r\n                    print('================')\r\n                    print('No Temp Data found to plot')\r\n                    print('================')\r\n                    traceback.print_exc()\r\n                    logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                        level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                        datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n                    logging.info('========================')\r\n                    logging.info('Temp Box Plot Data error')\r\n                    logging.info('========================')\r\n                    logging.info('========================')\r\n                    # logging.info(data_frame[n]['DirName'])\r\n                    logging.info('========================')\r\n                    logging.info('========================')\r\n                    # logging.info(str(traceback.print_exc()))\r\n                    logging.info('========================')\r\n                    os.chdir('..')\r\n                n = n+dn\r\n        except:\r\n            print('================')\r\n            print('ping Temp Box Loop error')\r\n            print('================')\r\n            traceback.print_exc()\r\n            logging.basicConfig(filename='Pencil_Analysis.log',\r\n                                level=logging.DEBUG, format=' %(asctime)s,%(message)s ',\r\n                                datefmt=' %m/%d/%Y %I:%M:%S %p ')\r\n            logging.info('========================')\r\n            logging.info('ping temp box plot error')\r\n            logging.info('========================')\r\n\r\n            os.chdir('..')\r\n            return False\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PencilAnalysis.py b/PencilAnalysis.py
--- a/PencilAnalysis.py	(revision 460d1a83c8d5a51a3db1200156b57baf084141ec)
+++ b/PencilAnalysis.py	(date 1647846326459)
@@ -1745,16 +1745,15 @@
                         DirEcc = (round(eccentricity[0], 1))
                         if DirEcc == 0.1:
                             nearest = find_nearest(time,350)
-                            plt.xlim([0, time[:nearest-1]])
                         elif DirEcc == 0.3:
                             nearest = find_nearest(time, 350)
-                            plt.xlim([0, time[:nearest-1]])
+                            plt.xlim([0, time[nearest-1]])
                         elif DirEcc == 0.5:
                             nearest = find_nearest(time, 2000)
-                            plt.xlim([0, time[:nearest-1]])
+                            plt.xlim([0, time[nearest-1]])
                         elif DirEcc == 0.7:
                             nearest = find_nearest(time, 3000)
-                            plt.xlim([0, time[:nearest-1]])
+                            plt.xlim([0, time[nearest-1]])
 
                         DirMass = data_frame[n]['par1']
 
Index: CheckArrayTest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import unittest\r\nimport numpy as np\r\nimport math\r\n\r\ndef find_nearest(array,value):\r\n    idx = np.searchsorted(array, value, side=\"left\")\r\n    if idx > 0 and (idx == len(array) or math.fabs(value - array[idx-1]) < math.fabs(value - array[idx])):\r\n        return array[idx-1]\r\n    else:\r\n        return array[idx]\r\n\r\nclass MyTestCase(unittest.TestCase):\r\n    def test_something(self):\r\n       time = [1,2,3]\r\n       a = find_nearest(time,2)\r\n       print(a)\r\n       time[a-1]\r\n\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CheckArrayTest.py b/CheckArrayTest.py
--- a/CheckArrayTest.py	(revision 460d1a83c8d5a51a3db1200156b57baf084141ec)
+++ b/CheckArrayTest.py	(date 1647846307663)
@@ -1,6 +1,7 @@
 import unittest
 import numpy as np
 import math
+import matplotlib.pyplot as plt
 
 def find_nearest(array,value):
     idx = np.searchsorted(array, value, side="left")
@@ -13,8 +14,13 @@
     def test_something(self):
        time = [1,2,3]
        a = find_nearest(time,2)
-       print(a)
+       time[:a-1]
+       print("a is " + str(a))
        time[a-1]
+       plt.plot(time)
+       b = time[a-1]
+       //plt.xlim([0,time[a-1]])
+       plt.show()
 
 if __name__ == '__main__':
     unittest.main()
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b401757a-0003-45bc-838e-dc9c4677ac58\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Unit Test\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"26PbeRMRzAjR7XHWJKrgYvx65qy\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"run.code.analysis.last.selected.profile\" value=\"aDefault\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"CheckArrayTest\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"C:\\Users\\Joshua\\AppData\\Local\\Programs\\Python\\Python39\\python.exe\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <module name=\"\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"C:\\Users\\Joshua\\PycharmProjects\\AGNPythonResarch\\CheckArrayTest.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Python.CheckArrayTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b401757a-0003-45bc-838e-dc9c4677ac58\" name=\"Changes\" comment=\"\" />\r\n      <created>1647328264135</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1647328264135</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 460d1a83c8d5a51a3db1200156b57baf084141ec)
+++ b/.idea/workspace.xml	(date 1647846197342)
@@ -3,6 +3,7 @@
   <component name="ChangeListManager">
     <list default="true" id="b401757a-0003-45bc-838e-dc9c4677ac58" name="Changes" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/CheckArrayTest.py" beforeDir="false" afterPath="$PROJECT_DIR$/CheckArrayTest.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
